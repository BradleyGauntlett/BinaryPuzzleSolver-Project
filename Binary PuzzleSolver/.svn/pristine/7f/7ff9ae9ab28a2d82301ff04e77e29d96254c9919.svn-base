import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;

import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 * 
 * @author Bradley Gauntlett
 *
 */
public class Controller {
	private static View view;
	Color lg = new Color(216, 255, 228);
	private Model model;
	private static Controller instance = new Controller();

	private Controller() {

		model = Model.getInstance();
		view = new View(model.n);
		view.addClearButtonListener(new ClearListener());
		view.addCheckListener(new CheckListener());
		view.addHintListener(new HintListener());
		view.addPropListener(new PropListener());
		view.addSolveListener(new SolveListener());
		view.addSizeListener(new SizeListener());
		view.addGenListener(new GenListener());

	}

	public View getView() {
		return view;
	}

	public static GameButton[][] getElements() {
		return view.getElements();
	}

	/**
	 * 
	 * @return instance of Controller
	 */
	public static Controller getInstance() {
		return instance;
	}

	/**
	 * 
	 * @author Bradley Gauntlett
	 *
	 */
	class ClearListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {
					view.gameElements[i][j].elementState = 0;
					view.gameElements[i][j].valState = 1;
					view.gameElements[i][j].setText("");
					view.gameElements[i][j].setBackground(Color.BLACK);
					view.controlPanel.setBackground(Color.BLACK);

					view.check.setBackground(lg);
					view.solve.setBackground(lg);
					view.genPuzzle.setBackground(lg);
					view.clear.setBackground(lg);
					view.prop.setBackground(lg);
					view.hint.setBackground(lg);

					view.check.setForeground(Color.BLACK);
					view.solve.setForeground(Color.BLACK);
					view.genPuzzle.setForeground(Color.BLACK);
					view.clear.setForeground(Color.BLACK);
					view.prop.setForeground(Color.BLACK);
					view.hint.setForeground(Color.BLACK);

				}
			}
			view.addClearButtonListener(new ClearListener());
			view.addCheckListener(new CheckListener());
			view.addHintListener(new HintListener());
			view.addPropListener(new PropListener());
			view.addSolveListener(new SolveListener());
			view.addSizeListener(new SizeListener());
		}

	}

	// -------------------------------

	/**
	 * 
	 * @author Bradley Gauntlett
	 *
	 */
	class CheckListener implements ActionListener {

		@Override
		/**
		 * @param ActionEvent
		 *            e
		 */
		public void actionPerformed(ActionEvent e) {
			model.checkGrid(view.gameElements);

			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {
					System.out.print("[" + view.gameElements[i][j].valState + "]");
				}
				System.out.println();
			}

			for (int i = 0; i < Model.n; i++) {
				for (int j = 0; j < Model.n; j++) {
					if (model.triplematch == true || model.equalcol == false || model.equalrow == false) {

						view.gameElements[i][j].setBackground(Color.red);
						view.gameElements[i][j].setForeground(Color.BLACK);
						// view.controlPanel.setBackground(Color.RED);
						view.levels.setBackground(Color.RED);
						// set button clr
						view.check.setBackground(Color.BLACK);
						view.solve.setBackground(Color.BLACK);
						view.genPuzzle.setBackground(Color.BLACK);
						view.clear.setBackground(Color.BLACK);
						view.prop.setBackground(Color.BLACK);
						view.hint.setBackground(Color.BLACK);

						view.check.setForeground(Color.RED);
						view.solve.setForeground(Color.RED);
						view.genPuzzle.setForeground(Color.RED);
						view.clear.setForeground(Color.RED);
						view.prop.setForeground(Color.RED);
						view.hint.setForeground(Color.RED);

					} else {

						view.gameElements[i][j].setBackground(lg);
						view.gameElements[i][j].setForeground(Color.BLACK);
						// view.controlPanel.setBackground(lg);
						view.levels.setBackground(lg);
						view.check.setBackground(lg);
						view.solve.setBackground(lg);
						view.genPuzzle.setBackground(lg);
						view.clear.setBackground(lg);
						view.prop.setBackground(lg);
						view.hint.setBackground(lg);

						view.check.setForeground(Color.BLACK);
						view.solve.setForeground(Color.BLACK);
						view.genPuzzle.setForeground(Color.BLACK);
						view.clear.setForeground(Color.BLACK);
						view.prop.setForeground(Color.BLACK);
						view.hint.setForeground(Color.BLACK);

					}

				}

			}

			view.addClearButtonListener(new ClearListener());
			view.addCheckListener(new CheckListener());
			view.addHintListener(new HintListener());
			view.addPropListener(new PropListener());
			view.addSolveListener(new SolveListener());
			view.addSizeListener(new SizeListener());

			if ((model.triplematch == false && model.equalcol == true && model.equalrow == true)) {
				// JOptionPane.showMessageDialog(view, "Complete");
			}

			else if (model.triplematch == true || model.equalcol == false || model.equalrow == false) {
				// JOptionPane.showMessageDialog(view, "Incomplete");
			}

		}
	}

	/**
	 * 
	 * @author Bradley Gauntlett
	 *
	 */
	class HintListener implements ActionListener {
		@Override
		/**
		 * @param ActionEvent
		 *            e
		 */
		public void actionPerformed(ActionEvent e) {
			String m1 = model.hint1;
			String m2 = model.hint2;
			int ch = (int) (Math.random() * 2);
			if ((model.triplematch == false || model.equalcol == true || model.equalrow == true) && (m1 == "")
					&& (m2 == "")) {
				JOptionPane.showMessageDialog(view, "No hint available");
			} else if ((m1 == "") && (m2 == "")) {
				JOptionPane.showMessageDialog(view, "No hint available");
			} else if ((ch == 0)) {
				JOptionPane.showMessageDialog(view, m1);
			} else if ((ch == 1)) {
				JOptionPane.showMessageDialog(view, m2);
			} else if (m1 == "") {
				JOptionPane.showMessageDialog(view, m2);
			} else if (m2 == "") {
				JOptionPane.showMessageDialog(view, m1);
			}
			view.addClearButtonListener(new ClearListener());
			view.addCheckListener(new CheckListener());
			view.addHintListener(new HintListener());
			view.addPropListener(new PropListener());
			view.addSolveListener(new SolveListener());
			view.addSizeListener(new SizeListener());
		}
	}

	/**
	 * 
	 * @author Bradley Gauntlett
	 *
	 */
	class GenListener implements ActionListener {

		@Override
		/**
		 * @param ActionEvent
		 *            arg0
		 */
		public void actionPerformed(ActionEvent arg0) {

			int[][] grid = new int[model.n][model.n];

			if (model.n == 4) {
				BPS.n = 4;
				for (int i = 0; i < model.n; i++) {
					for (int j = 0; j < model.n; j++) {
						grid[i][j] = Grids.grid4[i][j];
					}
				}
				System.out.println("n = " + model.n);
			} else if (model.n == 8) {
				model.n = 8;
				BPS.n = 8;
				for (int i = 0; i < model.n; i++) {
					for (int j = 0; j < model.n; j++) {
						grid[i][j] = Grids.grid8[i][j];
					}
				}
				System.out.println("n = " + model.n);
			} else if (model.n == 12) {
				model.n = 12;
				BPS.n = 12;
				for (int i = 0; i < model.n; i++) {
					for (int j = 0; j < model.n; j++) {
						grid[i][j] = Grids.grid12[i][j];
					}
				}
				System.out.println("n = " + model.n);
			} else if (model.n == 16) {
				model.n = 16;
				BPS.n = 16;
				for (int i = 0; i < model.n; i++) {
					for (int j = 0; j < model.n; j++) {
						grid[i][j] = Grids.grid16[i][j];
					}
				}
				System.out.println("n = " + model.n);
			}

			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {
					view.gameElements[i][j].valState = grid[i][j];
					if (grid[i][j] != 9) {
						view.gameElements[i][j].setBackground(Color.DARK_GRAY);
					}
				}
			}

			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {
					System.out.print("[" + view.gameElements[i][j].valState + "]");
				}
				System.out.println();
			}
			// grid = Grids.grid4;

			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {

					if (view.gameElements[i][j].valState == 1 && view.gameElements[i][j].getText() == "") {
						view.gameElements[i][j].setText("1");
						view.gameElements[i][j].setForeground(lg);
						view.gameElements[i][j].setFont(new Font("Courier New", Font.BOLD, 60)
								.deriveFont(AffineTransform.getScaleInstance(1, 1)));
					}
					if (view.gameElements[i][j].valState == 0 && view.gameElements[i][j].getText() == "") {
						view.gameElements[i][j].setText("0");
						view.gameElements[i][j].setForeground(lg);
						view.gameElements[i][j].setFont(new Font("Courier New", Font.BOLD, 60)
								.deriveFont(AffineTransform.getScaleInstance(1, 1)));

					}
				}
			}

			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {
					System.out.print("[" + view.gameElements[i][j].valState + "]");
				}
				System.out.println();
			}
			view.addClearButtonListener(new ClearListener());
			view.addCheckListener(new CheckListener());
			view.addHintListener(new HintListener());
			view.addPropListener(new PropListener());
			view.addSolveListener(new SolveListener());
			view.addSizeListener(new SizeListener());

		}
	}

	/**
	 * 
	 * @author Bradley Gauntlett
	 *
	 */
	class PropListener implements ActionListener {
		@Override
		/**
		 * @param ActionEvent
		 *            e
		 */
		public void actionPerformed(ActionEvent e) {

			view.gameElements = model.partSolve(view.gameElements);

			// if ((model.triplematch == true || model.equalcol == false ||
			// model.equalrow == false)) {
			// JOptionPane.showMessageDialog(view, "Complete");
			// }

			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {
					/*
					 * More conditions needed here
					 */

					if (view.gameElements[i][j].valState == 1 && view.gameElements[i][j].getText() == "") {
						view.gameElements[i][j].setText("1");
						view.gameElements[i][j].setForeground(lg);
						view.gameElements[i][j].setFont(new Font("Courier New", Font.BOLD, 60)
								.deriveFont(AffineTransform.getScaleInstance(1, 1)));

					}

					if (view.gameElements[i][j].valState == 0 && view.gameElements[i][j].getText() == "") {
						view.gameElements[i][j].setText("0");
						view.gameElements[i][j].setForeground(lg);
						view.gameElements[i][j].setFont(new Font("Courier New", Font.BOLD, 60)
								.deriveFont(AffineTransform.getScaleInstance(1, 1)));

					}
				}
			}

			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {
					System.out.print("[" + view.gameElements[i][j].valState + "]");
				}
				System.out.println();
			}
			view.addClearButtonListener(new ClearListener());
			view.addCheckListener(new CheckListener());
			view.addHintListener(new HintListener());
			view.addPropListener(new PropListener());
			view.addSolveListener(new SolveListener());
			view.addSizeListener(new SizeListener());
		}
	}

	/**
	 * 
	 * @author Bradley Gauntlett
	 *
	 */
	class SolveListener implements ActionListener {
		@Override
		/**
		 * @param ActionEvent
		 *            e
		 */
		public void actionPerformed(ActionEvent e) {

			int[][] grid = new int[model.n][model.n];

			if (model.n == 4) {
				BPS.n = 4;
				System.out.println("n = " + model.n);
			} else if (model.n == 8) {
				model.n = 8;
				BPS.n = 8;
				System.out.println("n = " + model.n);
			} else if (model.n == 12) {
				model.n = 12;
				BPS.n = 12;
				System.out.println("n = " + model.n);
			} else if (model.n == 16) {
				model.n = 16;
				BPS.n = 16;
				System.out.println("n = " + model.n);

			}

			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {
					grid[i][j] = view.gameElements[i][j].valState;
				}
			}
			BPS.solve(0, 0, grid);

			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {
					view.gameElements[i][j].valState = grid[i][j];
				}
			}
			// if ((model.triplematch == true || model.equalcol == false ||
			// model.equalrow == false)) {
			// JOptionPane.showMessageDialog(view, "Complete");
			// }

			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {
					/*
					 * More conditions needed here
					 */

					if (view.gameElements[i][j].valState == 1 && view.gameElements[i][j].getText() == "") {
						view.gameElements[i][j].setText("1");
						view.gameElements[i][j].setForeground(lg);
						view.gameElements[i][j].setFont(new Font("Courier New", Font.BOLD, 60)
								.deriveFont(AffineTransform.getScaleInstance(1, 1)));

					}

					if (view.gameElements[i][j].valState == 0 && view.gameElements[i][j].getText() == "") {
						view.gameElements[i][j].setText("0");
						view.gameElements[i][j].setForeground(lg);
						view.gameElements[i][j].setFont(new Font("Courier New", Font.BOLD, 60)
								.deriveFont(AffineTransform.getScaleInstance(1, 1)));

					}
				}
			}

			for (int i = 0; i < model.n; i++) {
				for (int j = 0; j < model.n; j++) {
					System.out.print("[" + view.gameElements[i][j].valState + "]");
				}
				System.out.println();
			}
			view.addClearButtonListener(new ClearListener());
			view.addCheckListener(new CheckListener());
			view.addHintListener(new HintListener());
			view.addPropListener(new PropListener());
			view.addSolveListener(new SolveListener());
			view.addSizeListener(new SizeListener());

		}

	}

	class SizeListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent event) {
			JComboBox<String> combo = (JComboBox<String>) event.getSource();
			String chosenSize = (String) combo.getSelectedItem();

			if (chosenSize.equals("EASY (4X4)")) {
				model.n = 4;
				BPS.n = 4;
				System.out.println("n = " + model.n);
			} else if (chosenSize.equals("AVERAGE (8X8)")) {
				model.n = 8;
				BPS.n = 8;
				System.out.println("n = " + model.n);
			} else if (chosenSize.equals("DIFFICULT (12X12)")) {
				model.n = 12;
				BPS.n = 12;
				System.out.println("n = " + model.n);
			} else if (chosenSize.equals("EXTREME (16X16)")) {
				model.n = 16;
				BPS.n = 16;
				System.out.println("n = " + model.n);

			}
			view.dispose();
			view.gameElements = new GameButton[model.n][model.n];
			view = new View(model.n);

			if (chosenSize.equals("EASY (4X4)")) {
				view.levels.setSelectedItem("EASY (4X4)");
			} else if (chosenSize.equals("AVERAGE (8X8)")) {
				view.levels.setSelectedItem("AVERAGE (8X8)");
			} else if (chosenSize.equals("DIFFICULT (12X12)")) {
				view.levels.setSelectedItem("DIFFICULT (12X12)");
			} else if (chosenSize.equals("EXTREME (16X16)")) {
				view.levels.setSelectedItem("EXTREME (16X16)");
			}

			view.addClearButtonListener(new ClearListener());
			view.addCheckListener(new CheckListener());
			view.addHintListener(new HintListener());
			view.addPropListener(new PropListener());
			view.addSolveListener(new SolveListener());
			view.addSizeListener(new SizeListener());
			view.addGenListener(new GenListener());
		}

	}

}
// ---------------------------------
