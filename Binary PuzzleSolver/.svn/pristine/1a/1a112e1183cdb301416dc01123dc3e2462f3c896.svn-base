import java.util.Scanner;

public class ProofOfConcept_GridChecker {

	public static void main(String[] args) {
		int n;

		boolean triplematch = false;
		Scanner in = new Scanner(System.in);

		System.out.println("Enter size of grid");
		n = in.nextInt();

		int[][] grid = new int[n][n];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				grid[i][j] = (int) (Math.random() * 2);
			}
		}
		// =================================================================================

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				System.out.print("[" + grid[i][j] + "]");
			}
			System.out.println();
		}
		// ==================================================================================

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {

				// -------
				if ((i == 0 && triplematch == false)) {
					if ((grid[i][j] == grid[i + 1][j] && grid[i][j] == grid[i + 2][j])) {
						triplematch = true;

					}

				}

				if (i == n && triplematch == false) {
					if ((grid[i][j] == grid[i - 1][j] && grid[i][j] == grid[i - 2][j])) {
						triplematch = true;

					}

				}

				if (j == 0 && triplematch == false) {
					if ((grid[i][j] == grid[i][j + 1] && grid[i][j] == grid[i][j + 2])) {
						triplematch = true;

					}

				}

				if (j == n && triplematch == false) {
					if ((grid[i][j] == grid[i][j - 1] && grid[i][j] == grid[i][j - 2])) {
						triplematch = true;

					}
				}

				try {
					if (((grid[i][j] == grid[i - 1][j]) && (grid[i][j] == grid[i + 1][j])) && triplematch == false) {
						triplematch = true;
					}

					if (((grid[i][j] == grid[i][j - 1]) && (grid[i][j] == grid[i][j + 1])) && triplematch == false) {
						triplematch = true;
					}

				} catch (Exception ArrayIndexOutOfBoundsException) {

				}

				// =====================================================================================

			}
		}

		if (triplematch == true)

		{
			System.out.println("Incomplete");

		} else if (triplematch == false) {
			System.out.println("Complete");
		}

		// ===========================================================================================================

		boolean equalrow = true;
		int onecount = 0;

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {

				if (grid[i][j] == 1) {
					onecount++;
				}
			}
			if (onecount != n / 2) {
				equalrow = false;
				break;
			} else {
				onecount = 0;
			}

		}
		if (equalrow == false) {
			System.out.println("Row with unequal bits found " + onecount);
		}
		// -----------
		int onecount2 = 0;
		boolean equalcol = true;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {

				if (grid[j][i] == 1) {
					onecount2++;
				}
			}
			if (onecount2 != n / 2) {
				equalcol = false;
				break;
			} else {
				onecount2 = 0;
			}

		}
		if (equalcol == false) {
			System.out.println("Col with unequal bits found " + onecount2);
		}

	}
}
