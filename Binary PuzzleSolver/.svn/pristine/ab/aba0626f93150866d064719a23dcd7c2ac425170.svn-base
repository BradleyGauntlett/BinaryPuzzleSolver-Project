package Reports;

public class Tester {
	static int n = 4;
	static int[][] newgrid = new int[n][n];

	public static void printGrid(int[][] grid) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {

				if (grid[i][j] == -1) {
					System.out.print("[ ]");
				} else {
					System.out.print("[" + grid[i][j] + "]");
				}
			}
			System.out.println();
		}
	}

	public static void checkGrid(int[][] grid) {
		boolean triplematch = false;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {

				// -------
				if ((i == 0 && triplematch == false)) {
					if ((grid[i][j] == grid[i + 1][j] && grid[i][j] == grid[i + 2][j])) {
						triplematch = true;

					}

				}

				if (i == n && triplematch == false) {
					if ((grid[i][j] == grid[i - 1][j] && grid[i][j] == grid[i - 2][j])) {
						triplematch = true;

					}

				}

				if (j == 0 && triplematch == false) {
					if ((grid[i][j] == grid[i][j + 1] && grid[i][j] == grid[i][j + 2])) {
						triplematch = true;

					}

				}

				if (j == n && triplematch == false) {
					if ((grid[i][j] == grid[i][j - 1] && grid[i][j] == grid[i][j - 2])) {
						triplematch = true;

					}
				}

				try {
					if (((grid[i][j] == grid[i - 1][j]) && (grid[i][j] == grid[i + 1][j])) && triplematch == false) {
						triplematch = true;
					}

					if (((grid[i][j] == grid[i][j - 1]) && (grid[i][j] == grid[i][j + 1])) && triplematch == false) {
					}

				} catch (Exception ArrayIndexOutOfBoundsException) {

				}
				// =====================================================================================
			}
		}

		if (triplematch == true)

		{
			System.out.println("Incomplete");

		} else if (triplematch == false) {
			System.out.println("Complete");
		}

		// ===========================================================================================================

		boolean equalrow = true;
		int onecount = 0;

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {

				if (grid[i][j] == 1) {
					onecount++;
				}
			}
			if (onecount != n / 2) {
				equalrow = false;
				break;
			} else {
				onecount = 0;
			}

		}
		if (equalrow == false) {
			System.out.println("Row with unequal bits found " + onecount);
		}
		// -----------
		int onecount2 = 0;
		boolean equalcol = true;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {

				if (grid[j][i] == 1) {
					onecount2++;
				}
			}
			if (onecount2 != n / 2) {
				equalcol = false;
				break;
			} else {
				onecount2 = 0;
			}

		}
		if (equalcol == false) {
			System.out.println("Col with unequal bits found " + onecount2);
		}

	}

	public static void partSolveGrid(int[][] grid) {

		// ---------Copy Array----------

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				newgrid[i][j] = grid[i][j];
			}
		}
		// ------------------------------

		// -------------Apply Solver---------------

		for (int c = 0; c < n; c++) {
			for (int d = 0; d < n; d++) {

				if (newgrid[c][d] == -1) {

					for (int i = 0; i < n; i++) {
						for (int j = 0; j < n; j++) {

							// -------

							try {
								if ((((newgrid[i][j] == -1) && ((grid[i - 1][j] == 1) && (grid[i + 1][j] == 1))))) {
									newgrid[i][j] = 0;
								}

								if ((((newgrid[i][j] == -1) && ((grid[i][j - 1] == 1) && (grid[i][j + 1] == 1))))) {
									newgrid[i][j] = 0;
								}

							} catch (Exception ArrayIndexOutOfBoundsException) {

							}

							// ======================================================================

							// -------

							try {
								if ((((newgrid[i][j] == -1) && ((grid[i - 1][j] == 0) && (grid[i + 1][j] == 0))))) {
									newgrid[i][j] = 1;
								}

								if ((((newgrid[i][j] == -1) && ((grid[i][j - 1] == 0) && (grid[i][j + 1] == 0))))) {
									newgrid[i][j] = 1;
								}

							} catch (Exception ArrayIndexOutOfBoundsException) {

							}

							// ======================================================================

						}

					}
				}
			}
		}
	}


	// ========MAIN==========

	public static void main(String[] args) {

		int[][] grid = new int[][] { { 0, 1, -1, 0 }, { 1, -1, -1, 0 }, { -1, 1, -1, 1 }, { 1, -1, 0, 1 } };

		// int[][] grid = new int[][] { { -1, 1, 1, 0 }, { 1, -1, -1, 0 }, {
		// -1,1, -1, 1 }, { 1, -1, 0, 1 } };
		// ========================================

		printGrid(grid);

		// loop this
		for (int i = 0; i < 4; i++) {
			partSolveGrid(grid);
			if (i > 1) {
				partSolveGrid(newgrid);
			}
		}

		System.out.println();
		printGrid(newgrid);

	}
}
